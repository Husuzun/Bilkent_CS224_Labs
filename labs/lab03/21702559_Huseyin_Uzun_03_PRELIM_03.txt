# CS224
# lab03_pre_part01
# Section 03
# Hüseyin Uzun
# 21702559
# 24.10.2023

	.text
# CS224, Program to be used in Lab 3
# October 16, 2023
	la	$a0, howManyNode
	li	$v0, 4
	syscall
	li	$v0, 5
	syscall
	move	$a0, $v0
	jal	createLinkedList
	
# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	jal 	printLinkedList
	
# Stop. 
	li	$v0, 10
	syscall

createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 12
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
	la	$a0, enterKey
	li	$v0, 4
	syscall
	li	$v0, 5
	syscall
	move	$t1, $v0
	la	$a0, enterData
	li	$v0, 4
	syscall
	li	$v0, 5
	syscall
	move	$t2, $v0
	sw	$t1, 4($s2)	# Store the data value.
	sw	$t2, 8($s2)
	move	$t5, $t1
	
addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	la	$a0, enterKey
	li	$v0, 4
	syscall
	li	$v0, 5
	syscall
	move	$t1, $v0
	la	$a0, enterData
	li	$v0, 4
	syscall
	li	$v0, 5
	syscall
	move	$t2, $v0
	bne	$t5, $t1, continue
	lw	$s4, 8($s2)
	add	$s4, $s4, $t2
	sw	$s4, 8($s2)
	j addNode
continue:
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 12 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.

	sw	$t1, 4($s2)	# Store the data value.
	sw	$t2, 8($s2)
	move	$t5, $t1
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	lw	$s4, 8($s0)
	addi	$s3, $s3, 1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s3: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s0: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, keyValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s4	# $s2: Data of current node
	li	$v0, 1		
	syscall	

# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	jr	$ra
#=========================================================		
	.data
line:	
	.asciiz "\n --------------------------------------"
enterKey:
	.asciiz	"\n Enter key: "
	
enterData:
	.asciiz	"\n Enter data: "

howManyNode:
	.asciiz	"\n Enter Number of Node: "
	
nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "

keyValueOfCurrentNode:
	.asciiz	"\n Key Value of Current Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "



# CS224
# lab03_pre_part02
# Section 03
# Hüseyin Uzun
# 21702559
# 24.10.2023

.text 	

	li	$t0, 0
	li	$t1, 3
	li	$t2, 32
	
	la	$a0, input
	li	$v0, 4
	syscall
	li	$v0, 5
	syscall
	move	$s2, $v0
	
	la $a0, instructionCount
	la $a1, end
	
	jal instructionCount
	
	add $s3, $v0, $zero
	
	li $v0,4
	la $a0, numberReg
	syscall
	
	li $v0, 1
	move $a0, $s3
	syscall
		
	li $v0, 10
	syscall

#######################################################

instructionCount: 

	addi $sp, $sp, -24
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $s5, 20($sp)	
	
	while:
		
		bge $a0,$a1, done
		
		lw $s5, 0($a0)
		srl $s1, $s5, 26
		
		beq $s1, $zero, rCounter
		ble $s1, $t1, jCounter
iCounter:	
		srl	$s1, $s5, 16
		div	$s1, $t2
		mfhi	$s1
		bne	$s1, $s2, notAdder1
		addi $s3, $s3, 1
	notAdder1:
		srl	$s1, $s5, 21
		div	$s1, $t2
		mfhi	$s1
		bne	$s1, $s2, notAdder2
		addi $s3, $s3, 1
	notAdder2:
		addi $a0,$a0, 4
		j 	while
rCounter:
		srl	$s1, $s5, 11
		div	$s1, $t2
		mfhi	$s1
		bne	$s1, $s2, notAdder3
		addi $s3, $s3, 1
	notAdder3:
		srl	$s1, $s5, 16
		div	$s1, $t2
		mfhi	$s1
		bne	$s1, $s2, notAdder4
		addi $s3, $s3, 1
	notAdder4:
		srl	$s1, $s5, 21
		div	$s1, $t2
		mfhi	$s1
		bne	$s1, $s2, notAdder5
		addi $s3, $s3, 1
	notAdder5:
		addi $a0,$a0, 4
		j 	while
jCounter:	
		addi $a0,$a0, 4
		j 	while

	done: 	
		add $v0, $s3, $zero		
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)
		lw $s4, 16($sp)
		lw $s5, 20($sp)
		
		addi $sp, $sp, 24
end:	jr $ra
	




.data

	main: .asciiz "For main program"
	subProg: .asciiz "For the subprogram"
	numberReg: .asciiz "The number of register: "
	newLine: .asciiz "\n"
	input: .asciiz "Input: \n"









