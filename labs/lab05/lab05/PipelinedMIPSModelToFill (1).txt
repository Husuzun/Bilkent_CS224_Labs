// Define pipes that exist in the PipelinedDatapath. 
// The pipe between Writeback (W) and Fetch (F), as well as Fetch (F) and Decode (D) is given to you.
// Create the rest of the pipes where inputs follow the naming conventions in the book.


module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clk,		// StallD will be connected as this EN
                output logic[31:0] instrD, PcPlus4D);

                always_ff @(posedge clk)
                    if(EN)
                        begin
                        instrD<=instr;
                        PcPlus4D<=PcPlus4F;
                        end
                
endmodule

// Similarly, the pipe between Writeback (W) and Fetch (F) is given as follows.

module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk,		// StallF will be connected as this EN
                output logic[31:0] PCF);

                always_ff @(posedge clk)
                    if(EN)
                        begin
                        PCF<=PC;
                        end
                
endmodule

// *******************************************************************************
// Below, write the modules for the pipes PipeDtoE, PipeEtoM, PipeMtoW yourselves.
// Don't forget to connect Control signals in these pipes as well.
// *******************************************************************************


module PipeDtoE(input logic RegWriteD, MemtoRegD, MemWriteD, AluSrcD, RegDstD, BranchD,
		input logic[2:0] AluControlD,
		input logic[31:0] RD1D, RD2D, PCPlus4D,
		input logic[4:0] RsD, RtD, RdD,
		input logic[15:0] SignImmD,
                input logic CLR, clk,	// FlushE will be connected as this CLR
                input logic RegWriteE, MemtoRegE, MemWriteE, AluSrcE, RegDstE, BranchE,
		input logic[2:0] AluControlE,
		output logic[31:0] PCPlus4E, RD1E, RD1E,
		output logic[15:0] SignImmE,
		output logic[4:0] RsE, RtE, RdE);

                always_ff @(posedge clk, posedge CLR)
                    if(CLR)
                        begin
                        	RegWriteE<=0;
				MemtoRegE<=0;
				MemWriteE<=0;
				AluControlE<=0;
				AluSrcE<=0;
				RegDstE<=0;
				BranchE<=0;
				RD1E<=0;
				RD2E<=0;
				RsE<=0;
				RtE<=0;
				RdE<=0;
				SignImmE<=0;
				PCPlus4E<=0;
                        end
		    else
			begin
				RegWriteE<=RegWriteD;
				MemtoRegE<=MemtoRegD;
				MemWriteE<=MemWriteD;
				AluControlE<=AluControlD;
				AluSrcE<=AluSrcD;
				RegDstE<=RegDstD;
				BranchE<=BranchD;
				RD1E<=RD1D;
				RD2E<=RD2D;
				RsE<=RdD;
				RtE<=RdD;
				RdE<=RdD;
				SignImmE<=SignImmD;
				PCPlus4E<=PCPlus4D;
			end
                
endmodule

module PipeEtoM(input logic RegWriteE, MemtoRegE, MemWriteE, BranchE, ZeroE,
		input logic[31:0] ALUOutE, PCBranchE, WriteDataE,
		input logic[4:0] WriteRegE,
                input logic clk,
		output logic RegWriteM, MemtoRegM, MemWriteM, BranchM, ZeroM,
		output logic[31:0] ALUOutM, PCBranchM, WriteDataM,
		output logic[4:0] WriteRegM);

                always_ff @(posedge clk,posedge reset)
                    if(reset)
			begin
				RegWriteM<=0;
				MemtoRegM<=0;
				MemWriteM<=0;
				BranchM<=0;
				ZeroM<=0;
				ALUOutM<=0;
				PCBranchM<=0;
				WriteDataM<=0;
				WriteRegM<=0;
			end
		    else
                        begin
				RegWriteM<=RegWriteE;
				MemtoRegM<=MemtoRegE;
				MemWriteM<=MemWriteE;
				BranchM<=BranchE;
				ZeroM<=ZeroE;
				ALUOutM<=ALUOutE;
				PCBranchM<=PCBranchE;
				WriteDataM<=WriteDataE;
				WriteRegM<=WriteRegE;
			end
                
endmodule

module PipeMtoW(input logic RegWriteM, MemtoRegM,
		input logic[31:0] ALUOutE, PCBranchE,
		input logic[4:0] WriteRegM,
                input logic clk,
		output logic RegWriteW, MemtoRegW,
		output logic[31:0] ALUOutW, ReadDataW,
		output logic[4:0] WriteRegW);

                always_ff @(posedge clk,posedge reset)
                    if(reset)
			begin
				RegWriteW<=0;
				MemtoRegW<=0;
				ReadDataW<=0;
				ALUOutW<=0;
				WriteRegW<=0;
			end
		    else
                        begin
				RegWriteW<=RegWriteM;
				MemtoRegW<=MemtoRegM;
				ReadDataW<=ReadDataM;
				ALUOutW<=ALUOutM;
				WriteRegW<=WriteRegM;
			end
                
endmodule



// *******************************************************************************
// End of the individual pipe definitions.
// ******************************************************************************

// *******************************************************************************
// Below is the definition of the datapath.
// The signature of the module is given. The datapath will include (not limited to) the following items:
//  (1) Adder that adds 4 to PC
//  (2) Shifter that shifts SignImmE to left by 2
//  (3) Sign extender and Register file
//  (4) PipeFtoD
//  (5) PipeDtoE and ALU
//  (5) Adder for PCBranchM
//  (6) PipeEtoM and Data Memory
//  (7) PipeMtoW
//  (8) Many muxes
//  (9) Hazard unit
//  ...?
// *******************************************************************************

module datapath (input  logic clk, reset, RegWriteW,
		         input  logic[2:0]  ALUControlD,
		         input logic BranchD,
		         input logic [31:0] pcPlus4D,
		         input logic [31:0] ResultW,
		         input logic [4:0] rsD,rtD,rdD,	
		         input logic [15:0] immD,		         // Add input-outputs if necessary
		         input logic [4:0] WriteRegW,			
		         
		         output logic RegWriteE,MemToRegE,MemWriteE,                 
                 	output logic[31:0] ALUOutE, WriteDataE,
                 	output logic [4:0] WriteRegE,
                 	output logic [31:0] PCBranchE,
                 	output logic pcSrcE); 

	// ********************************************************************
	// Here, define the wires that are needed inside this pipelined datapath module
	// ********************************************************************

	logic stallF, stallD,  ForwardAD, ForwardBD,  FlushE, ForwardAE, ForwardBE;		// Wires for connecting Hazard Unit
												// Add the rest of the wires whenever necessary.

	
	// ********************************************************************
	// Instantiate the required modules below in the order of the datapath flow.
	// ********************************************************************
	assign PCSrcM = BranchM & ZeroM;
	mux2 #(32)  pcmuxInit(PCPlus4F, PCBranchM,PCSrcM,PCI);
	PipeWtoF pipewtof(PCI, StallF, clk, PCF);
	assign PCPlus4F = PCF + 4;
	imem imemIn(PCF,instr);

	PipeFtoD pipeftod(instr, PcPlus4F, StallD,clk, instrD, PcPlus4D);

	regfile     rf(clk, RegWriteW, instrD[25:21], instrD[20:16], writeRegW,			// Instantiated register file.
                   resultW, RD1D, RD2D);
	signext sn(instr[15:0], SignImmD);
	assign RsD = instrD[25:21];
	assign RtD = instrD[20:16];
	assign RdD = instrD[15:11];
	
	PipeDtoE pipedtoe(RegWriteD, MemtoRegD, MemWriteD, AluSrcD, RegDstD, BranchD,
		AluControlD,
		RD1D, RD2D, PCPlus4D,
		RsD, RtD, RdD,
		SignImmD,
                CLR, clk,
                RegWriteE, MemtoRegE, MemWriteE, AluSrcE, RegDstE, BranchE,
		AluControlE,
		PCPlus4E, RD1E, RD1E,
		SignImmE,
		RsE, RtE, RdE);
	
	mux2 #(5) mux2EWriteReg(RtE, RdE,
                 RegDstE,
                  WriteRegE);

	mux4 #(32) mux3ESrcAE(RD1E, ResultW, ALUOutM, 0,
                  ForwardAE,
                  SrcAE);

    	mux4 #(32) mux3EWriteDataE(RD2E, ResultW, ALUOutM, 0,
               ForwardBE,
                WriteDataE);

	mux2 #(32) mux2ESrcBE(WriteDataE, SignImmE,
                AluSrcE,
                SrcBE);

	sl2 shiftSIE(SignImmE,
                SignImmEOut);

    	adder adderPCBranchM(SignImmEOut, PCPlus4E, PCBranchE);

	alu alu1(SrcAE, SrcBE,
               AluControlE,
               ALUOut,
               ZeroE, reset);
	
	PipeEtoM pipeetom(RegWriteE, MemtoRegE, MemWriteE, BranchE, ZeroE,
		ALUOutE, PCBranchE, WriteDataE,
		WriteRegE,clk,RegWriteM, MemtoRegM, MemWriteM, BranchM, ZeroM,
		ALUOutM, PCBranchM, WriteDataM,WriteRegM);

	dmem dmemIn( clk, MemWriteM,
                 ALUOutM, WriteDataM,
                 ReadDataM);

	mux2 #(32) mux2WResultW( ALUOutW, ReadDataW, 
                MemtoRegW,
                ResultW);

	PipeMtoW pipemtow(RegWriteM, MemtoRegM,ALUOutE, PCBranchE,
		WriteRegM,clk,RegWriteW, MemtoRegW,
		ALUOutW, ReadDataW,WriteRegW);

	HazardUnit hu(RegWriteW,WriteRegW,RegWriteM,MemToRegM,WriteRegM,RegWriteE,MemToRegE,
                rsE,rtE,rsD,rtD,ForwardAE,ForwardBE,FlushE,StallD,StallF);
endmodule



// Hazard Unit with inputs and outputs named
// according to the convention that is followed on the book.

module HazardUnit( input logic RegWriteW,
                input logic [4:0] WriteRegW,
                input logic RegWriteM,MemToRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE,MemToRegE,
                input logic [4:0] rsE,rtE,
                input logic [4:0] rsD,rtD,
                output logic [2:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF

    );
    
    always_comb begin
    
	// ********************************************************************
	// Here, write equations for the Hazard Logic.
	// If you have troubles, please study pages ~420-430 in your book.
	// ********************************************************************
 
        
    end
endmodule


module mips (input  logic        clk, reset,
             output logic[31:0]  pc,
             input  logic[31:0]  instr,
             output logic        memwrite,
             output logic[31:0]  aluout, resultW,
             output logic[31:0] instrOut,
             input  logic[31:0]  readdata);

  logic        memtoreg, pcsrc, zero, alusrc, regdst, regwrite, jump;
  logic [2:0]  alucontrol;
  assign instrOut = instr;

	// ********************************************************************
	// Below, instantiate a controller and a datapath with their new (if modified) signatures
	// and corresponding connections.
	// ********************************************************************


endmodule


// External instruction memory used by MIPS single-cycle
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//
// 	***************************************************************************
//	Here, you can paste your own test cases that you prepared for the part 1-g.
//	Below is a program from the single-cycle lab.
//	***************************************************************************
//
//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20020005;  	// disassemble, by hand 
		8'h04: instr = 32'h2003000c;  	// or with a program,
		8'h08: instr = 32'h2067fff7;  	// to find out what
		8'h0c: instr = 32'h00e22025;  	// this program does!
		8'h10: instr = 32'h00642824;
		8'h14: instr = 32'h00a42820;
		8'h18: instr = 32'h10a7000a;
		8'h1c: instr = 32'h0064202a;
		8'h20: instr = 32'h10800001;
		8'h24: instr = 32'h20050000;
		8'h28: instr = 32'h00e2202a;
		8'h2c: instr = 32'h00853820;
		8'h30: instr = 32'h00e23822;
		8'h34: instr = 32'hac670044;
		8'h38: instr = 32'h8c020050;
		8'h3c: instr = 32'h08000011;
		8'h40: instr = 32'h20020001;
		8'h44: instr = 32'hac020054;
		8'h48: instr = 32'h08000012;	// j 48, so it will loop here
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule


// 	***************************************************************************
//	Below are the modules that you shouldn't need to modify at all..
//	***************************************************************************

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump,
                  output logic[2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, 
         jump, aluop);

   aludec  ad (funct, aluop, alucontrol);

endmodule

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump,
	              output logic[1:0] aluop );
   logic [8:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 9'b110000100; // R-type
      6'b100011: controls <= 9'b101001000; // LW
      6'b101011: controls <= 9'b001010000; // SW
      6'b000100: controls <= 9'b000100010; // BEQ
      6'b001000: controls <= 9'b101000000; // ADDI
      6'b000010: controls <= 9'b000000001; // J
      default:   controls <= 9'bxxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module regfile (input    logic clk, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3) 
         rf [wa3] <= wd3;	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
    
endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule